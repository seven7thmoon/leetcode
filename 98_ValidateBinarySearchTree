/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/*
 * @param {TreeNode} root
 * @return {boolean}
 */
 var isValidBST = function(root) {
    if (root == null) return true; //如果root是[]
    
    //遞迴
    function backtrack(tempRoot, low, high){
        if(tempRoot == null) return true;
        if(low >= tempRoot.val || high <= tempRoot.val){
            return false;
        }
        //這裡不用再下IF。另外，tempRoot代換後跟low/high的比較需要想清楚
        return backtrack(tempRoot.left, low, tempRoot.val) && backtrack(tempRoot.right, tempRoot.val, high);
    }
    
    return backtrack(root, -Infinity, Infinity);    
};

//另外還有中序排列的方法
/*references: 
        https://github.com/Tcdian/LeetCode/blob/master/leetcode/Binary%20Tree/98.%20Validate%20Binary%20Search%20Tree.js.md
        https://pjchender.blogspot.com/2020/05/binary-tree.html

*/